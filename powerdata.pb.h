// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: powerdata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_powerdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_powerdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_powerdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_powerdata_2eproto {
  static const uint32_t offsets[];
};
namespace protopower {
class Charger;
struct ChargerDefaultTypeInternal;
extern ChargerDefaultTypeInternal _Charger_default_instance_;
class Gauge;
struct GaugeDefaultTypeInternal;
extern GaugeDefaultTypeInternal _Gauge_default_instance_;
class PowerData;
struct PowerDataDefaultTypeInternal;
extern PowerDataDefaultTypeInternal _PowerData_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace protopower
PROTOBUF_NAMESPACE_OPEN
template<> ::protopower::Charger* Arena::CreateMaybeMessage<::protopower::Charger>(Arena*);
template<> ::protopower::Gauge* Arena::CreateMaybeMessage<::protopower::Gauge>(Arena*);
template<> ::protopower::PowerData* Arena::CreateMaybeMessage<::protopower::PowerData>(Arena*);
template<> ::protopower::Status* Arena::CreateMaybeMessage<::protopower::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protopower {

// ===================================================================

class Gauge final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protopower.Gauge) */ {
 public:
  inline Gauge() : Gauge(nullptr) {}
  ~Gauge() override;
  explicit PROTOBUF_CONSTEXPR Gauge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Gauge(const Gauge& from);
  Gauge(Gauge&& from) noexcept
    : Gauge() {
    *this = ::std::move(from);
  }

  inline Gauge& operator=(const Gauge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gauge& operator=(Gauge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Gauge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Gauge* internal_default_instance() {
    return reinterpret_cast<const Gauge*>(
               &_Gauge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Gauge& a, Gauge& b) {
    a.Swap(&b);
  }
  inline void Swap(Gauge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gauge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Gauge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Gauge>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Gauge& from);
  void MergeFrom(const Gauge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Gauge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protopower.Gauge";
  }
  protected:
  explicit Gauge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVbatFieldNumber = 1,
    kSocFieldNumber = 2,
    kChargingFieldNumber = 3,
  };
  // float vbat = 1;
  void clear_vbat();
  float vbat() const;
  void set_vbat(float value);
  private:
  float _internal_vbat() const;
  void _internal_set_vbat(float value);
  public:

  // float soc = 2;
  void clear_soc();
  float soc() const;
  void set_soc(float value);
  private:
  float _internal_soc() const;
  void _internal_set_soc(float value);
  public:

  // bool charging = 3;
  void clear_charging();
  bool charging() const;
  void set_charging(bool value);
  private:
  bool _internal_charging() const;
  void _internal_set_charging(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protopower.Gauge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float vbat_;
    float soc_;
    bool charging_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_powerdata_2eproto;
};
// -------------------------------------------------------------------

class Charger final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protopower.Charger) */ {
 public:
  inline Charger() : Charger(nullptr) {}
  ~Charger() override;
  explicit PROTOBUF_CONSTEXPR Charger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Charger(const Charger& from);
  Charger(Charger&& from) noexcept
    : Charger() {
    *this = ::std::move(from);
  }

  inline Charger& operator=(const Charger& from) {
    CopyFrom(from);
    return *this;
  }
  inline Charger& operator=(Charger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Charger& default_instance() {
    return *internal_default_instance();
  }
  static inline const Charger* internal_default_instance() {
    return reinterpret_cast<const Charger*>(
               &_Charger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Charger& a, Charger& b) {
    a.Swap(&b);
  }
  inline void Swap(Charger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Charger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Charger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Charger>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Charger& from);
  void MergeFrom(const Charger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Charger* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protopower.Charger";
  }
  protected:
  explicit Charger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVbusFieldNumber = 1,
    kVsysFieldNumber = 2,
    kVbatFieldNumber = 3,
    kIinFieldNumber = 4,
    kIchgFieldNumber = 5,
    kIdchgFieldNumber = 6,
  };
  // float vbus = 1;
  void clear_vbus();
  float vbus() const;
  void set_vbus(float value);
  private:
  float _internal_vbus() const;
  void _internal_set_vbus(float value);
  public:

  // float vsys = 2;
  void clear_vsys();
  float vsys() const;
  void set_vsys(float value);
  private:
  float _internal_vsys() const;
  void _internal_set_vsys(float value);
  public:

  // float vbat = 3;
  void clear_vbat();
  float vbat() const;
  void set_vbat(float value);
  private:
  float _internal_vbat() const;
  void _internal_set_vbat(float value);
  public:

  // float iin = 4;
  void clear_iin();
  float iin() const;
  void set_iin(float value);
  private:
  float _internal_iin() const;
  void _internal_set_iin(float value);
  public:

  // float ichg = 5;
  void clear_ichg();
  float ichg() const;
  void set_ichg(float value);
  private:
  float _internal_ichg() const;
  void _internal_set_ichg(float value);
  public:

  // float idchg = 6;
  void clear_idchg();
  float idchg() const;
  void set_idchg(float value);
  private:
  float _internal_idchg() const;
  void _internal_set_idchg(float value);
  public:

  // @@protoc_insertion_point(class_scope:protopower.Charger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float vbus_;
    float vsys_;
    float vbat_;
    float iin_;
    float ichg_;
    float idchg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_powerdata_2eproto;
};
// -------------------------------------------------------------------

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protopower.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit PROTOBUF_CONSTEXPR Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protopower.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kChargingFieldNumber = 2,
    kFastchargeFieldNumber = 3,
    kPrechargeFieldNumber = 4,
    kFaultsFieldNumber = 5,
  };
  // bool source = 1;
  void clear_source();
  bool source() const;
  void set_source(bool value);
  private:
  bool _internal_source() const;
  void _internal_set_source(bool value);
  public:

  // bool charging = 2;
  void clear_charging();
  bool charging() const;
  void set_charging(bool value);
  private:
  bool _internal_charging() const;
  void _internal_set_charging(bool value);
  public:

  // bool fastcharge = 3;
  void clear_fastcharge();
  bool fastcharge() const;
  void set_fastcharge(bool value);
  private:
  bool _internal_fastcharge() const;
  void _internal_set_fastcharge(bool value);
  public:

  // bool precharge = 4;
  void clear_precharge();
  bool precharge() const;
  void set_precharge(bool value);
  private:
  bool _internal_precharge() const;
  void _internal_set_precharge(bool value);
  public:

  // uint32 faults = 5;
  void clear_faults();
  uint32_t faults() const;
  void set_faults(uint32_t value);
  private:
  uint32_t _internal_faults() const;
  void _internal_set_faults(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protopower.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool source_;
    bool charging_;
    bool fastcharge_;
    bool precharge_;
    uint32_t faults_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_powerdata_2eproto;
};
// -------------------------------------------------------------------

class PowerData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protopower.PowerData) */ {
 public:
  inline PowerData() : PowerData(nullptr) {}
  ~PowerData() override;
  explicit PROTOBUF_CONSTEXPR PowerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PowerData(const PowerData& from);
  PowerData(PowerData&& from) noexcept
    : PowerData() {
    *this = ::std::move(from);
  }

  inline PowerData& operator=(const PowerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerData& operator=(PowerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PowerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PowerData* internal_default_instance() {
    return reinterpret_cast<const PowerData*>(
               &_PowerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PowerData& a, PowerData& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PowerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PowerData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PowerData& from);
  void MergeFrom(const PowerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protopower.PowerData";
  }
  protected:
  explicit PowerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGaugeFieldNumber = 1,
    kChargerFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // .protopower.Gauge gauge = 1;
  bool has_gauge() const;
  private:
  bool _internal_has_gauge() const;
  public:
  void clear_gauge();
  const ::protopower::Gauge& gauge() const;
  PROTOBUF_NODISCARD ::protopower::Gauge* release_gauge();
  ::protopower::Gauge* mutable_gauge();
  void set_allocated_gauge(::protopower::Gauge* gauge);
  private:
  const ::protopower::Gauge& _internal_gauge() const;
  ::protopower::Gauge* _internal_mutable_gauge();
  public:
  void unsafe_arena_set_allocated_gauge(
      ::protopower::Gauge* gauge);
  ::protopower::Gauge* unsafe_arena_release_gauge();

  // .protopower.Charger charger = 2;
  bool has_charger() const;
  private:
  bool _internal_has_charger() const;
  public:
  void clear_charger();
  const ::protopower::Charger& charger() const;
  PROTOBUF_NODISCARD ::protopower::Charger* release_charger();
  ::protopower::Charger* mutable_charger();
  void set_allocated_charger(::protopower::Charger* charger);
  private:
  const ::protopower::Charger& _internal_charger() const;
  ::protopower::Charger* _internal_mutable_charger();
  public:
  void unsafe_arena_set_allocated_charger(
      ::protopower::Charger* charger);
  ::protopower::Charger* unsafe_arena_release_charger();

  // .protopower.Status status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::protopower::Status& status() const;
  PROTOBUF_NODISCARD ::protopower::Status* release_status();
  ::protopower::Status* mutable_status();
  void set_allocated_status(::protopower::Status* status);
  private:
  const ::protopower::Status& _internal_status() const;
  ::protopower::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::protopower::Status* status);
  ::protopower::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:protopower.PowerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protopower::Gauge* gauge_;
    ::protopower::Charger* charger_;
    ::protopower::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_powerdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Gauge

// float vbat = 1;
inline void Gauge::clear_vbat() {
  _impl_.vbat_ = 0;
}
inline float Gauge::_internal_vbat() const {
  return _impl_.vbat_;
}
inline float Gauge::vbat() const {
  // @@protoc_insertion_point(field_get:protopower.Gauge.vbat)
  return _internal_vbat();
}
inline void Gauge::_internal_set_vbat(float value) {
  
  _impl_.vbat_ = value;
}
inline void Gauge::set_vbat(float value) {
  _internal_set_vbat(value);
  // @@protoc_insertion_point(field_set:protopower.Gauge.vbat)
}

// float soc = 2;
inline void Gauge::clear_soc() {
  _impl_.soc_ = 0;
}
inline float Gauge::_internal_soc() const {
  return _impl_.soc_;
}
inline float Gauge::soc() const {
  // @@protoc_insertion_point(field_get:protopower.Gauge.soc)
  return _internal_soc();
}
inline void Gauge::_internal_set_soc(float value) {
  
  _impl_.soc_ = value;
}
inline void Gauge::set_soc(float value) {
  _internal_set_soc(value);
  // @@protoc_insertion_point(field_set:protopower.Gauge.soc)
}

// bool charging = 3;
inline void Gauge::clear_charging() {
  _impl_.charging_ = false;
}
inline bool Gauge::_internal_charging() const {
  return _impl_.charging_;
}
inline bool Gauge::charging() const {
  // @@protoc_insertion_point(field_get:protopower.Gauge.charging)
  return _internal_charging();
}
inline void Gauge::_internal_set_charging(bool value) {
  
  _impl_.charging_ = value;
}
inline void Gauge::set_charging(bool value) {
  _internal_set_charging(value);
  // @@protoc_insertion_point(field_set:protopower.Gauge.charging)
}

// -------------------------------------------------------------------

// Charger

// float vbus = 1;
inline void Charger::clear_vbus() {
  _impl_.vbus_ = 0;
}
inline float Charger::_internal_vbus() const {
  return _impl_.vbus_;
}
inline float Charger::vbus() const {
  // @@protoc_insertion_point(field_get:protopower.Charger.vbus)
  return _internal_vbus();
}
inline void Charger::_internal_set_vbus(float value) {
  
  _impl_.vbus_ = value;
}
inline void Charger::set_vbus(float value) {
  _internal_set_vbus(value);
  // @@protoc_insertion_point(field_set:protopower.Charger.vbus)
}

// float vsys = 2;
inline void Charger::clear_vsys() {
  _impl_.vsys_ = 0;
}
inline float Charger::_internal_vsys() const {
  return _impl_.vsys_;
}
inline float Charger::vsys() const {
  // @@protoc_insertion_point(field_get:protopower.Charger.vsys)
  return _internal_vsys();
}
inline void Charger::_internal_set_vsys(float value) {
  
  _impl_.vsys_ = value;
}
inline void Charger::set_vsys(float value) {
  _internal_set_vsys(value);
  // @@protoc_insertion_point(field_set:protopower.Charger.vsys)
}

// float vbat = 3;
inline void Charger::clear_vbat() {
  _impl_.vbat_ = 0;
}
inline float Charger::_internal_vbat() const {
  return _impl_.vbat_;
}
inline float Charger::vbat() const {
  // @@protoc_insertion_point(field_get:protopower.Charger.vbat)
  return _internal_vbat();
}
inline void Charger::_internal_set_vbat(float value) {
  
  _impl_.vbat_ = value;
}
inline void Charger::set_vbat(float value) {
  _internal_set_vbat(value);
  // @@protoc_insertion_point(field_set:protopower.Charger.vbat)
}

// float iin = 4;
inline void Charger::clear_iin() {
  _impl_.iin_ = 0;
}
inline float Charger::_internal_iin() const {
  return _impl_.iin_;
}
inline float Charger::iin() const {
  // @@protoc_insertion_point(field_get:protopower.Charger.iin)
  return _internal_iin();
}
inline void Charger::_internal_set_iin(float value) {
  
  _impl_.iin_ = value;
}
inline void Charger::set_iin(float value) {
  _internal_set_iin(value);
  // @@protoc_insertion_point(field_set:protopower.Charger.iin)
}

// float ichg = 5;
inline void Charger::clear_ichg() {
  _impl_.ichg_ = 0;
}
inline float Charger::_internal_ichg() const {
  return _impl_.ichg_;
}
inline float Charger::ichg() const {
  // @@protoc_insertion_point(field_get:protopower.Charger.ichg)
  return _internal_ichg();
}
inline void Charger::_internal_set_ichg(float value) {
  
  _impl_.ichg_ = value;
}
inline void Charger::set_ichg(float value) {
  _internal_set_ichg(value);
  // @@protoc_insertion_point(field_set:protopower.Charger.ichg)
}

// float idchg = 6;
inline void Charger::clear_idchg() {
  _impl_.idchg_ = 0;
}
inline float Charger::_internal_idchg() const {
  return _impl_.idchg_;
}
inline float Charger::idchg() const {
  // @@protoc_insertion_point(field_get:protopower.Charger.idchg)
  return _internal_idchg();
}
inline void Charger::_internal_set_idchg(float value) {
  
  _impl_.idchg_ = value;
}
inline void Charger::set_idchg(float value) {
  _internal_set_idchg(value);
  // @@protoc_insertion_point(field_set:protopower.Charger.idchg)
}

// -------------------------------------------------------------------

// Status

// bool source = 1;
inline void Status::clear_source() {
  _impl_.source_ = false;
}
inline bool Status::_internal_source() const {
  return _impl_.source_;
}
inline bool Status::source() const {
  // @@protoc_insertion_point(field_get:protopower.Status.source)
  return _internal_source();
}
inline void Status::_internal_set_source(bool value) {
  
  _impl_.source_ = value;
}
inline void Status::set_source(bool value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:protopower.Status.source)
}

// bool charging = 2;
inline void Status::clear_charging() {
  _impl_.charging_ = false;
}
inline bool Status::_internal_charging() const {
  return _impl_.charging_;
}
inline bool Status::charging() const {
  // @@protoc_insertion_point(field_get:protopower.Status.charging)
  return _internal_charging();
}
inline void Status::_internal_set_charging(bool value) {
  
  _impl_.charging_ = value;
}
inline void Status::set_charging(bool value) {
  _internal_set_charging(value);
  // @@protoc_insertion_point(field_set:protopower.Status.charging)
}

// bool fastcharge = 3;
inline void Status::clear_fastcharge() {
  _impl_.fastcharge_ = false;
}
inline bool Status::_internal_fastcharge() const {
  return _impl_.fastcharge_;
}
inline bool Status::fastcharge() const {
  // @@protoc_insertion_point(field_get:protopower.Status.fastcharge)
  return _internal_fastcharge();
}
inline void Status::_internal_set_fastcharge(bool value) {
  
  _impl_.fastcharge_ = value;
}
inline void Status::set_fastcharge(bool value) {
  _internal_set_fastcharge(value);
  // @@protoc_insertion_point(field_set:protopower.Status.fastcharge)
}

// bool precharge = 4;
inline void Status::clear_precharge() {
  _impl_.precharge_ = false;
}
inline bool Status::_internal_precharge() const {
  return _impl_.precharge_;
}
inline bool Status::precharge() const {
  // @@protoc_insertion_point(field_get:protopower.Status.precharge)
  return _internal_precharge();
}
inline void Status::_internal_set_precharge(bool value) {
  
  _impl_.precharge_ = value;
}
inline void Status::set_precharge(bool value) {
  _internal_set_precharge(value);
  // @@protoc_insertion_point(field_set:protopower.Status.precharge)
}

// uint32 faults = 5;
inline void Status::clear_faults() {
  _impl_.faults_ = 0u;
}
inline uint32_t Status::_internal_faults() const {
  return _impl_.faults_;
}
inline uint32_t Status::faults() const {
  // @@protoc_insertion_point(field_get:protopower.Status.faults)
  return _internal_faults();
}
inline void Status::_internal_set_faults(uint32_t value) {
  
  _impl_.faults_ = value;
}
inline void Status::set_faults(uint32_t value) {
  _internal_set_faults(value);
  // @@protoc_insertion_point(field_set:protopower.Status.faults)
}

// -------------------------------------------------------------------

// PowerData

// .protopower.Gauge gauge = 1;
inline bool PowerData::_internal_has_gauge() const {
  return this != internal_default_instance() && _impl_.gauge_ != nullptr;
}
inline bool PowerData::has_gauge() const {
  return _internal_has_gauge();
}
inline void PowerData::clear_gauge() {
  if (GetArenaForAllocation() == nullptr && _impl_.gauge_ != nullptr) {
    delete _impl_.gauge_;
  }
  _impl_.gauge_ = nullptr;
}
inline const ::protopower::Gauge& PowerData::_internal_gauge() const {
  const ::protopower::Gauge* p = _impl_.gauge_;
  return p != nullptr ? *p : reinterpret_cast<const ::protopower::Gauge&>(
      ::protopower::_Gauge_default_instance_);
}
inline const ::protopower::Gauge& PowerData::gauge() const {
  // @@protoc_insertion_point(field_get:protopower.PowerData.gauge)
  return _internal_gauge();
}
inline void PowerData::unsafe_arena_set_allocated_gauge(
    ::protopower::Gauge* gauge) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gauge_);
  }
  _impl_.gauge_ = gauge;
  if (gauge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protopower.PowerData.gauge)
}
inline ::protopower::Gauge* PowerData::release_gauge() {
  
  ::protopower::Gauge* temp = _impl_.gauge_;
  _impl_.gauge_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protopower::Gauge* PowerData::unsafe_arena_release_gauge() {
  // @@protoc_insertion_point(field_release:protopower.PowerData.gauge)
  
  ::protopower::Gauge* temp = _impl_.gauge_;
  _impl_.gauge_ = nullptr;
  return temp;
}
inline ::protopower::Gauge* PowerData::_internal_mutable_gauge() {
  
  if (_impl_.gauge_ == nullptr) {
    auto* p = CreateMaybeMessage<::protopower::Gauge>(GetArenaForAllocation());
    _impl_.gauge_ = p;
  }
  return _impl_.gauge_;
}
inline ::protopower::Gauge* PowerData::mutable_gauge() {
  ::protopower::Gauge* _msg = _internal_mutable_gauge();
  // @@protoc_insertion_point(field_mutable:protopower.PowerData.gauge)
  return _msg;
}
inline void PowerData::set_allocated_gauge(::protopower::Gauge* gauge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gauge_;
  }
  if (gauge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gauge);
    if (message_arena != submessage_arena) {
      gauge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gauge, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gauge_ = gauge;
  // @@protoc_insertion_point(field_set_allocated:protopower.PowerData.gauge)
}

// .protopower.Charger charger = 2;
inline bool PowerData::_internal_has_charger() const {
  return this != internal_default_instance() && _impl_.charger_ != nullptr;
}
inline bool PowerData::has_charger() const {
  return _internal_has_charger();
}
inline void PowerData::clear_charger() {
  if (GetArenaForAllocation() == nullptr && _impl_.charger_ != nullptr) {
    delete _impl_.charger_;
  }
  _impl_.charger_ = nullptr;
}
inline const ::protopower::Charger& PowerData::_internal_charger() const {
  const ::protopower::Charger* p = _impl_.charger_;
  return p != nullptr ? *p : reinterpret_cast<const ::protopower::Charger&>(
      ::protopower::_Charger_default_instance_);
}
inline const ::protopower::Charger& PowerData::charger() const {
  // @@protoc_insertion_point(field_get:protopower.PowerData.charger)
  return _internal_charger();
}
inline void PowerData::unsafe_arena_set_allocated_charger(
    ::protopower::Charger* charger) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.charger_);
  }
  _impl_.charger_ = charger;
  if (charger) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protopower.PowerData.charger)
}
inline ::protopower::Charger* PowerData::release_charger() {
  
  ::protopower::Charger* temp = _impl_.charger_;
  _impl_.charger_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protopower::Charger* PowerData::unsafe_arena_release_charger() {
  // @@protoc_insertion_point(field_release:protopower.PowerData.charger)
  
  ::protopower::Charger* temp = _impl_.charger_;
  _impl_.charger_ = nullptr;
  return temp;
}
inline ::protopower::Charger* PowerData::_internal_mutable_charger() {
  
  if (_impl_.charger_ == nullptr) {
    auto* p = CreateMaybeMessage<::protopower::Charger>(GetArenaForAllocation());
    _impl_.charger_ = p;
  }
  return _impl_.charger_;
}
inline ::protopower::Charger* PowerData::mutable_charger() {
  ::protopower::Charger* _msg = _internal_mutable_charger();
  // @@protoc_insertion_point(field_mutable:protopower.PowerData.charger)
  return _msg;
}
inline void PowerData::set_allocated_charger(::protopower::Charger* charger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.charger_;
  }
  if (charger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(charger);
    if (message_arena != submessage_arena) {
      charger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, charger, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.charger_ = charger;
  // @@protoc_insertion_point(field_set_allocated:protopower.PowerData.charger)
}

// .protopower.Status status = 3;
inline bool PowerData::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool PowerData::has_status() const {
  return _internal_has_status();
}
inline void PowerData::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
inline const ::protopower::Status& PowerData::_internal_status() const {
  const ::protopower::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::protopower::Status&>(
      ::protopower::_Status_default_instance_);
}
inline const ::protopower::Status& PowerData::status() const {
  // @@protoc_insertion_point(field_get:protopower.PowerData.status)
  return _internal_status();
}
inline void PowerData::unsafe_arena_set_allocated_status(
    ::protopower::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protopower.PowerData.status)
}
inline ::protopower::Status* PowerData::release_status() {
  
  ::protopower::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protopower::Status* PowerData::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:protopower.PowerData.status)
  
  ::protopower::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::protopower::Status* PowerData::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::protopower::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::protopower::Status* PowerData::mutable_status() {
  ::protopower::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:protopower.PowerData.status)
  return _msg;
}
inline void PowerData::set_allocated_status(::protopower::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:protopower.PowerData.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protopower

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_powerdata_2eproto
